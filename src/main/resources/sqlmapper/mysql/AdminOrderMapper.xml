<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AdminOrderMapper">

   <!-- [GYEONG] 총 주문내역 뽑기 -->
    <select id="selectAdminOrderList" parameterType="Map" resultType="Map">
    SELECT 
        ORDERS.ORDER_UID,
        ORDERS.USER_UID,
        ORDERS.ORDER_DATE,
        MIN(PRODUCTS.PRODUCT_NAME) AS PRODUCT_NAME,
        COUNT(DISTINCT ORDER_DETAILS.PRODUCT_UID) AS PRODUCT_COUNT,
        SUM(ORDER_DETAILS.PRICE * CASE WHEN PRODUCTS.DISCOUNT_RATE > 0 THEN PRODUCTS.DISCOUNT_RATE ELSE 1 END * ORDER_DETAILS.QUANTITY) AS TOTAL_PRICE,
        ORDER_CONDITIONS.CONDITION_NAME
    FROM 
        ORDERS
        INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
        INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
        INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
        INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID

    <if test="pageScale != null">
        GROUP BY 
        ORDERS.ORDER_UID
        LIMIT #{pageBegin}, #{pageScale} 
    </if> 

    </select>
   <!-- [GYEONG] 검색한 결과 뽑기 -->
    <select id="selectAdminOrderSearchList" parameterType="Map" resultType="Map">
    SELECT 
    ORDERS.ORDER_UID,
    ORDERS.USER_UID,
    ORDERS.ORDER_DATE,
    MIN(PRODUCTS.PRODUCT_NAME) AS PRODUCT_NAME,
    COUNT(DISTINCT ORDER_DETAILS.PRODUCT_UID) AS PRODUCT_COUNT,
    SUM(ORDER_DETAILS.PRICE * CASE WHEN PRODUCTS.DISCOUNT_RATE > 0 THEN PRODUCTS.DISCOUNT_RATE ELSE 1 END * ORDER_DETAILS.QUANTITY) AS TOTAL_PRICE,
    ORDER_CONDITIONS.CONDITION_NAME
    FROM 
    ORDERS
    INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
    INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
    INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
    INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
    WHERE
    ORDERS.${searchType} LIKE CONCAT('%', #{searchKeyword}, '%')
    GROUP BY 
    ORDERS.ORDER_UID
    </select>

    <!-- [GYEONG] 총주문갯수 구하기 -->
    <select id="selectOrderCount" parameterType="Map" resultType="Int">
    SELECT COUNT(*) AS ORDER_COUNT
    FROM ORDERS
    </select>

    <!-- [GYEONG] 상세주문내역 뽑기 -->
    <select id="selectAdminOrderDetailList" parameterType="Map" resultType="Map">
    SELECT ORDERS.ORDER_UID, 
    ORDER_DETAILS.ORDER_DETAIL_UID,
    ORDERS.ORDER_DATE, 
    ORDER_DETAILS.PRICE, 
    ORDER_CONDITIONS.CONDITION_NAME,
    ORDER_DETAILS.QUANTITY,
    PRODUCTS.PRODUCT_NAME,
    PRODUCTS.DISCOUNT_RATE,
    PAYMENT_METHODS.PAYMENT_METHOD, 
    WAYBILLS.WAYBILL_CODE,
    ORDERS.USER_UID, 
    COALESCE(LOGISTICS.LOGISTICS_NAME, '-') AS LOGISTICS_NAME
    FROM ORDER_DETAILS
    INNER JOIN ORDERS
    ON ORDER_DETAILS.ORDER_UID = ORDERS.ORDER_UID
    INNER JOIN PRODUCTS
    ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
    INNER JOIN ORDER_CONDITIONS
    ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
    LEFT JOIN WAYBILLS 
    ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
    LEFT JOIN LOGISTICS 
    ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
    INNER JOIN PAYMENT_METHODS
    ON ORDERS.PAYMENT_METHOD_UID = PAYMENT_METHODS.PAYMENT_METHOD_UID
    WHERE ORDERS.ORDER_UID = #{ORDER_UID}
    </select>


    <!-- [GYEONG] 주문 주소정보 가져오기 -->
    <select id="selectOrderAddress" parameterType="Map" resultType="Map">
    SELECT ORDERS.ORDER_UID,
            ORDERS.RECIPIENT_NAME,
            ORDERS.RECIPIENT_TEL,
            ADDRESSES.ADDRESS_NAME,
            ADDRESSES.ZIP_CODE,
            ADDRESSES.ADDRESS,
            ADDRESSES.DETAIL
    FROM ORDERS
    INNER JOIN ADDRESSES
          ON ORDERS.ADDRESS_UID = ADDRESSES.ADDRESS_UID
    WHERE ORDERS.ORDER_UID = #{ORDER_UID}
    </select>


    <!-- [GYEONG] 주문 취소내역 가져오기 -->
    <select id="selectCancelOrderList" parameterType="Map" resultType="Map">
        SELECT CANCELLED_ORDERS.CANCELLED_ORDER_UID,
            CANCELLED_REASONS.REASON,
            CANCELLED_ORDERS.DATE,
            ORDERS.*
        FROM CANCELLED_ORDERS
        INNER JOIN CANCELLED_REASONS
        ON CANCELLED_ORDERS.REASON_UID = CANCELLED_REASONS.REASON_UID 
        INNER JOIN ORDERS
        ON CANCELLED_ORDERS.ORDER_UID = ORDERS.ORDER_UID
        <if test="pageScale != null">
        ORDER BY 
        CANCELLED_ORDERS.CANCELLED_ORDER_UID
        LIMIT #{pageBegin}, #{pageScale} 
        </if> 
    </select>


    <!-- [GYEONG] 주문 취소사유 통계 가져오기 -->
    <select id="selectCancelOrderStatistics" parameterType="Map" resultType="Map">
        SELECT CANCELLED_REASONS.REASON,
            COUNT(*) AS COUNT
        FROM CANCELLED_ORDERS
        INNER JOIN CANCELLED_REASONS
        ON CANCELLED_ORDERS.REASON_UID = CANCELLED_REASONS.REASON_UID 
        GROUP BY CANCELLED_REASONS.REASON
    </select>

    <!-- [GYEONG] 주문 취소 내역 총 갯수 가져오기 -->
    <select id="selectCancelOrderListCount" parameterType="Map" resultType="int">
    SELECT COUNT(*) 
    FROM CANCELLED_ORDERS
    INNER JOIN CANCELLED_REASONS
    ON CANCELLED_ORDERS.REASON_UID = CANCELLED_REASONS.REASON_UID 
    INNER JOIN ORDERS
    ON CANCELLED_ORDERS.ORDER_UID = ORDERS.ORDER_UID
    </select>
<!-- [GYEONG] 배송 내역 가져오기 -->
     <select id="selectShippingList" parameterType="Map" resultType="Map">
    SELECT 
        ORDERS.ORDER_UID,
        ORDERS.USER_UID,
        ORDERS.ORDER_DATE,
        ORDER_DETAILS.ORDER_DETAIL_UID,
        PRODUCTS.PRODUCT_NAME,
        ORDER_DETAILS.QUANTITY,
        ORDER_DETAILS.PRICE * CASE WHEN PRODUCTS.DISCOUNT_RATE > 0 THEN PRODUCTS.DISCOUNT_RATE ELSE 1 END * ORDER_DETAILS.QUANTITY AS TOTAL_PRICE,
        ORDER_CONDITIONS.CONDITION_NAME,
        WAYBILLS.WAYBILL_CODE,
        WAYBILL_TYPES.WAYBILL_TYPE,
        LOGISTICS.LOGISTICS_NAME
    FROM 
        ORDERS
        INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
        INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
        INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
        INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
        LEFT OUTER JOIN WAYBILLS ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
        LEFT OUTER JOIN WAYBILL_TYPES ON WAYBILL_TYPES.WAYBILL_TYPE_UID = WAYBILLS.WAYBILL_TYPE_UID
        LEFT OUTER JOIN LOGISTICS ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
    WHERE 
        ORDER_CONDITIONS.CONDITION_NAME = '상품준비중' OR
        ORDER_CONDITIONS.CONDITION_NAME = '배송중' OR 
        ORDER_CONDITIONS.CONDITION_NAME = '배송완료'
    ORDER BY 
        ORDERS.ORDER_UID, 
        PRODUCTS.PRODUCT_NAME, 
        WAYBILLS.WAYBILL_CODE
    </select>

    <!-- [GYEONG] 배송 내역 총 갯수 가져오기 -->
    <select id="selectShippingListCount" parameterType="Map" resultType="int">
    SELECT 
    COUNT(*) AS TOTAL_COUNT
    FROM 
    ORDERS
    INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
    INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
    INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
    INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
    LEFT OUTER JOIN WAYBILLS ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
    LEFT OUTER JOIN WAYBILL_TYPES ON WAYBILL_TYPES.WAYBILL_TYPE_UID = WAYBILLS.WAYBILL_TYPE_UID
    LEFT OUTER JOIN LOGISTICS ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
    WHERE 
    ORDER_CONDITIONS.CONDITION_NAME = '상품준비중' OR
    ORDER_CONDITIONS.CONDITION_NAME = '배송중' OR 
    ORDER_CONDITIONS.CONDITION_NAME = '배송완료'
    </select>
<!-- [GYEONG] 배송 선택 내역 가져오기 -->
    <select id="selectShippingListRadio" parameterType="Map" resultType="Map">
    SELECT 
    ORDERS.ORDER_UID,
    ORDERS.USER_UID,
    ORDERS.ORDER_DATE,
    ORDER_DETAILS.ORDER_DETAIL_UID,
    PRODUCTS.PRODUCT_NAME,
    ORDER_DETAILS.QUANTITY,
    ORDER_DETAILS.PRICE * CASE WHEN PRODUCTS.DISCOUNT_RATE > 0 THEN PRODUCTS.DISCOUNT_RATE ELSE 1 END * ORDER_DETAILS.QUANTITY AS TOTAL_PRICE,
    ORDER_CONDITIONS.CONDITION_NAME,
    IFNULL(WAYBILLS.WAYBILL_CODE, '') AS WAYBILL_CODE,
    IFNULL(WAYBILL_TYPES.WAYBILL_TYPE, '') AS WAYBILL_TYPE,
    IFNULL(LOGISTICS.LOGISTICS_NAME, '') AS LOGISTICS_NAME
FROM 
    ORDERS
    INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
    INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
    INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
    INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
    LEFT OUTER JOIN WAYBILLS ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
    LEFT OUTER JOIN WAYBILL_TYPES ON WAYBILL_TYPES.WAYBILL_TYPE_UID = WAYBILLS.WAYBILL_TYPE_UID
    LEFT OUTER JOIN LOGISTICS ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
WHERE 
    ORDER_CONDITIONS.CONDITION_NAME = #{condition}
    </select>

<!-- [GYEONG] 택배사 정보 내역 가져오기 -->
    <select id="selectLogistics" parameterType="Map" resultType="Map">
    SELECT * FROM LOGISTICS
    </select>


    <!-- [GYEONG] 택배사 정보 내역 가져오기 -->
    <select id="selectOrderConditions" parameterType="Map" resultType="Map">
    SELECT * FROM ORDER_CONDITIONS
    </select>

    <select id="selectWaybill" parameterType="Map" resultType="Map">
        SELECT 
        WAYBILLS.WAYBILL_CODE, 
        WAYBILL_TYPES.WAYBILL_TYPE, 
        LOGISTICS.LOGISTICS_NAME, 
        ORDER_CONDITIONS.CONDITION_NAME,
        WAYBILLS.LOGISTICS_UID,
        ORDER_DETAILS.ORDER_CONDITION_UID,
        ORDER_DETAILS.ORDER_DETAIL_UID
        FROM ORDER_DETAILS
        INNER JOIN WAYBILLS ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
        INNER JOIN WAYBILL_TYPES ON WAYBILL_TYPES.WAYBILL_TYPE_UID = WAYBILLS.WAYBILL_TYPE_UID
        INNER JOIN LOGISTICS ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
        INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
        WHERE ORDER_DETAILS.ORDER_DETAIL_UID = #{ORDER_DETAIL_UID}
    </select>
    <select id="selectWaybillType" parameterType="Map" resultType="Map">
    SELECT * FROM WAYBILL_TYPES
    </select>

    <!-- 운송장 정보 입력 -->
    <insert id="insertWaybill" parameterType="Map" >
    INSERT INTO WAYBILLS (WAYBILL_UID, LOGISTICS_UID, WAYBILL_TYPE_UID, WAYBILL_CODE)
    VALUES (#{WAYBILL_UID}, #{LOGISTICS_UID},#{WAYBILL_TYPE_UID}, #{WAYBILL_CODE})
    </insert>
    <!-- Order details 운종장 정보입력 -->
    <insert id="insertOrderDetailWaybill" parameterType="Map" >
    INSERT INTO ORDER_DETAILS (WAYBILL_UID)
    VALUES (#{WAYBILL_UID}) 
    </insert>

     <!-- Order details 배송상태 수정 -->
    <update id="updateOrderDetailOrdercondition" parameterType="Map" >
    UPDATE ORDER_DETAILS
    SET ORDER_CONDITION_UID = #{ORDER_CONDITION_UID}
    </update>
    
    <!-- 운송장정보 수정 -->

    <update id="updateWaybill" parameterType="Map" >
        UPDATE WAYBILLS
        SET LOGISTICS_UID = #{LOGISTICS_UID},
        WAYBILL_CODE = #{WAYBILL_CODE}
        WHERE WAYBILL_UID = (SELECT WAYBILL_UID FROM ORDER_DETAILS WHERE ORDER_DETAIL_UID = #{ORDER_DETAIL_UID})
    </update>

    <update id="updateOrderDetailWaybill" parameterType="Map" >
        UPDATE ORDER_DETAILS
        SET WAYBILL_UID = (SELECT WAYBILL_UID FROM WAYBILLS WHERE ORDER_DETAILS.WAYBILL_UID = WAYBILLS.WAYBILL_UID),
            ORDER_CONDITION_UID = #{ORDER_CONDITION_UID}
        WHERE ORDER_DETAIL_UID = #{ORDER_DETAIL_UID}
    </update>

<!--[GYEONG] 환불내역 리스트 -->
    <select id="selectRefundList" parameterType="Map" resultType="Map">
        SELECT 
            RO.REFUND_ORDER_UID, 
            RO.ORDER_DETAIL_UID, 
            RER.REASON_UID, 
            RER.REASON, 
            RER.EXPOSURE, 
            RO.REASON_DETAIL, 
            RO.DATE,
            OD.ORDER_CONDITION_UID,
            OC.CONDITION_NAME
            FROM 
            REFUND_ORDERS RO 
            INNER JOIN REFUND_EXCHANGE_REASONS RER ON RO.REASON_UID = RER.REASON_UID
            INNER JOIN ORDER_DETAILS OD ON RO.ORDER_DETAIL_UID = OD.ORDER_DETAIL_UID
            INNER JOIN ORDER_CONDITIONS OC ON OD.ORDER_CONDITION_UID = OC.ORDER_CONDITION_UID
    </select>
<!--[GYEONG] 환불완료 처리 -->
    <update id="updateRefund" parameterType="Map">
    UPDATE ORDER_DETAILS 
    SET ORDER_CONDITION_UID = 'OC8' 
    WHERE ORDER_DETAIL_UID = #{ORDER_DETAIL_UID}
    </update>

    <!--[GYEONG] 교환내역 리스트 -->
    <select id="selectExchangeList" parameterType="Map" resultType="Map">
        SELECT 
        EO.EXCHANGE_ORDER_UID, 
        EO.ORDER_DETAIL_UID, 
        ER.REASON_UID, 
        ER.REASON, 
        ER.EXPOSURE, 
        EO.REASON_DETAIL, 
        EO.DATE,
        OD.ORDER_CONDITION_UID,
        OC.CONDITION_NAME
        FROM 
        EXCHANGE_ORDERS EO 
        INNER JOIN REFUND_EXCHANGE_REASONS ER ON EO.REASON_UID = ER.REASON_UID
        INNER JOIN ORDER_DETAILS OD ON EO.ORDER_DETAIL_UID = OD.ORDER_DETAIL_UID
        INNER JOIN ORDER_CONDITIONS OC ON OD.ORDER_CONDITION_UID = OC.ORDER_CONDITION_UID
    </select>

    <!--[GYEONG] 교환완료 처리 -->
    <update id="updateExchange" parameterType="Map">
    UPDATE ORDER_DETAILS 
    SET ORDER_CONDITION_UID = 'OC7' 
    WHERE ORDER_DETAIL_UID = #{ORDER_DETAIL_UID}
    </update>
<!--[GYEONG]  환불상세사유 -->
<select id="selectRefundDetail" parameterType="Map" resultType="Map">
    SELECT REASON_DETAIL 
    FROM REFUND_ORDERS 
    WHERE REFUND_ORDER_UID = #{REFUND_ORDER_UID}
</select>

<!--[GYEONG]  교환상세사유 -->
<select id="selectExchangeDetail" parameterType="Map" resultType="Map">
    SELECT REASON_DETAIL 
    FROM EXCHANGE_ORDERS 
    WHERE EXCHANGE_ORDER_UID = #{EXCHANGE_ORDER_UID}
</select>
</mapper>