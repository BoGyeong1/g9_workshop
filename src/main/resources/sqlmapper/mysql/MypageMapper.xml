<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MypageMapper">

<!--[GYEONG] 주문내역 출력 -->
<select id="selectOrderList" parameterType="String" resultType="Map">
SELECT 
  ORDERS.ORDER_UID,
  ORDERS.ORDER_DATE,
	MIN(PRODUCTS.PRODUCT_NAME) AS PRODUCT_NAME,
  COUNT(DISTINCT ORDER_DETAILS.PRODUCT_UID) AS PRODUCT_COUNT,
  SUM(ORDER_DETAILS.PRICE * ORDER_DETAILS.QUANTITY) AS TOTAL_PRICE,
  ORDER_CONDITIONS.CONDITION_NAME
FROM 
  ORDERS
  INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
  INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
  INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
  INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
WHERE 
  USERS.USER_UID = #{USER_UID}
GROUP BY 
  ORDERS.ORDER_UID 
</select>

<!-- [GYEONG] 주문 상세내역 출력 -->
<select id="selectOrderDetailList" parameterType="Map" resultType="Map">
SELECT ORDERS.ORDER_UID, ORDERS.ORDER_DATE, ORDER_DETAILS.PRICE, ORDER_CONDITIONS.CONDITION_NAME,ORDER_DETAILS.QUANTITY,PRODUCTS.PRODUCT_NAME, WAYBILLS.WAYBILL_CODE, LOGISTICS.LOGISTICS_NAME
FROM ORDER_DETAILS
INNER JOIN ORDERS
ON ORDER_DETAILS.ORDER_UID = ORDERS.ORDER_UID
INNER JOIN PRODUCTS
ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
INNER JOIN ORDER_CONDITIONS
ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
INNER JOIN WAYBILLS 
ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
INNER JOIN LOGISTICS 
ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
WHERE ORDERS.ORDER_UID = #{orderId}
</select>

<!--[GYEONG]  주문자정보 -->
<select id="selectOrderer" parameterType="Map" resultType="Map">
SELECT USER_NAME, EMAIL, TEL
FROM USERS
WHERE USER_UID = #{USER_UID}
</select>

<!--[GYEONG]  주문번호에 따른 배송정보 출력 -->
<select id="selectShippingAddress" parameterType="Map" resultType="Map">
SELECT 	ORDERS.RECIPIENT_NAME, 
		ORDERS.RECIPIENT_TEL, 
		ADDRESSES.ADDRESS_NAME, 
		ADDRESSES.ZIP_CODE, 
		ADDRESSES.ADDRESS, 
		ADDRESSES.DETAIL,
    ADDRESSES.ADDRESS_UID
FROM ORDERS
INNER JOIN ADDRESSES
ON ORDERS.ADDRESS_UID = ADDRESSES.ADDRESS_UID
WHERE ORDERS.ORDER_UID = #{orderId}
</select>

<!--[GYEONG]  배송정보 수정-->
<update id="updateShippingAddress" parameterType="Map">
  UPDATE ADDRESSES, ORDERS
  SET ADDRESSES.ADDRESS_NAME = #{ADDRESS_NAME},   
      ADDRESSES.ZIP_CODE = #{ZIP_CODE},
      ADDRESSES.ADDRESS = #{ADDRESS},
      ADDRESSES.DETAIL = #{DETAIL},
      ADDRESSES.EXPOSURE = 'YES',
      ORDERS.RECIPIENT_NAME = #{RECIPIENT_NAME},
      ORDERS.RECIPIENT_TEL = #{RECIPIENT_TEL}
  WHERE ORDERS.ORDER_UID = #{orderId}
    AND ADDRESSES.ADDRESS_UID = ORDERS.ADDRESS_UID;
</update>


<!--[GYEONG]  user uid에 따른 교환, 반품, 취소 처리 가능한 목록 구현-->
<select id="selectApplicationList" parameterType="Map" resultType="Map">
SELECT ORDERS.ORDER_DATE,
       ORDERS.ORDER_UID,
       CONCAT(
           (SELECT P.PRODUCT_NAME 
            FROM PRODUCTS P 
            WHERE P.PRODUCT_UID = OD.PRODUCT_UID
            ORDER BY OD.ORDER_DETAIL_UID LIMIT 1),
           IF(COUNT(*) > 1, CONCAT(' 외 ', COUNT(*)-1, '개'), '')
       ) AS PRODUCT_NAME,
       SUM(OD.PRICE * OD.QUANTITY) AS PAY_AMOUNT,
       OC.CONDITION_NAME
FROM ORDER_DETAILS OD
INNER JOIN ORDERS ON ORDERS.ORDER_UID = OD.ORDER_UID
INNER JOIN ORDER_CONDITIONS OC ON OC.ORDER_CONDITION_UID = OD.ORDER_CONDITION_UID
INNER JOIN USERS ON ORDERS.USER_UID = USERS.USER_UID
WHERE USERS.USER_UID=#{USER_UID}
GROUP BY ORDERS.ORDER_UID
</select>

</mapper>