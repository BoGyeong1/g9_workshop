<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MypageMapper">

<!--[GYEONG] 주문내역 출력 -->
<select id="selectOrderListWithPayment" parameterType="String" resultType="java.util.Map">
    SELECT 
        ORDERS.ORDER_UID,
        ORDERS.ORDER_DATE,
        MIN(PRODUCTS.PRODUCT_NAME) AS PRODUCT_NAME,
        COUNT(DISTINCT ORDER_DETAILS.PRODUCT_UID) AS PRODUCT_COUNT,
        SUM(ORDER_DETAILS.PRICE * CASE WHEN PRODUCTS.DISCOUNT_RATE > 0 THEN PRODUCTS.DISCOUNT_RATE ELSE 1 END * ORDER_DETAILS.QUANTITY) AS TOTAL_PRICE,
        ORDER_CONDITIONS.CONDITION_NAME
    FROM 
        ORDERS
        INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
        INNER JOIN ORDER_CONDITIONS ON ORDER_CONDITIONS.ORDER_CONDITION_UID = ORDER_DETAILS.ORDER_CONDITION_UID
        INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
        INNER JOIN USERS ON USERS.USER_UID = ORDERS.USER_UID
    WHERE 
        ORDERS.USER_UID = #{USER_UID}
    GROUP BY 
        ORDERS.ORDER_UID
</select>


<!-- [GYEONG] 주문 상세내역 출력 -->
<select id="selectOrderDetailList" parameterType="Map" resultType="Map">
SELECT ORDERS.ORDER_UID, 
ORDER_DETAILS.ORDER_DETAIL_UID,
ORDERS.ORDER_DATE, 
ORDER_DETAILS.PRICE, 
ORDER_CONDITIONS.CONDITION_NAME,
ORDER_DETAILS.QUANTITY,
PRODUCTS.PRODUCT_NAME,
PRODUCTS.DISCOUNT_RATE, 
WAYBILLS.WAYBILL_CODE, 
LOGISTICS.LOGISTICS_NAME
FROM ORDER_DETAILS
INNER JOIN ORDERS
ON ORDER_DETAILS.ORDER_UID = ORDERS.ORDER_UID
INNER JOIN PRODUCTS
ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
INNER JOIN ORDER_CONDITIONS
ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
INNER JOIN WAYBILLS 
ON WAYBILLS.WAYBILL_UID = ORDER_DETAILS.WAYBILL_UID
INNER JOIN LOGISTICS 
ON LOGISTICS.LOGISTICS_UID = WAYBILLS.LOGISTICS_UID
WHERE ORDERS.ORDER_UID = #{orderId}
</select>

<!--[GYEONG]  주문자정보 -->
<select id="selectOrderer" parameterType="Map" resultType="Map">
SELECT USER_NAME, EMAIL, TEL
FROM USERS
WHERE USER_UID = #{USER_UID}
</select>

<!--[GYEONG]  주문번호에 따른 배송정보 출력 -->
<select id="selectShippingAddress" parameterType="Map" resultType="Map">
SELECT 	ORDERS.RECIPIENT_NAME, 
		ORDERS.RECIPIENT_TEL, 
		ADDRESSES.ADDRESS_NAME, 
		ADDRESSES.ZIP_CODE, 
		ADDRESSES.ADDRESS, 
		ADDRESSES.DETAIL,
    ADDRESSES.ADDRESS_UID,
    ORDERS.DELIVERY_LOCATION_UID,
    DELIVERY_LOCATIONS.DELIVERY_LOCATION
FROM ORDERS
INNER JOIN ADDRESSES
ON ORDERS.ADDRESS_UID = ADDRESSES.ADDRESS_UID
INNER JOIN DELIVERY_LOCATIONS
ON DELIVERY_LOCATIONS.DELIVERY_LOCATION_UID=ORDERS.DELIVERY_LOCATION_UID
WHERE ORDERS.ORDER_UID = #{orderId}
</select>

<!--[GYEONG]  배송정보 수정-->
<update id="updateShippingAddress" parameterType="Map">
  UPDATE ADDRESSES, ORDERS
  SET ADDRESSES.ADDRESS_NAME = #{ADDRESS_NAME},   
      ADDRESSES.ZIP_CODE = #{ZIP_CODE},
      ADDRESSES.ADDRESS = #{ADDRESS},
      ADDRESSES.DETAIL = #{DETAIL},
      ADDRESSES.EXPOSURE = 'YES',
      ORDERS.RECIPIENT_NAME = #{RECIPIENT_NAME},
      ORDERS.RECIPIENT_TEL = #{RECIPIENT_TEL}
      ORDERS.DELIVERY_LOCATION_UID = #{DELIVERY_LOCATION_UID}
  WHERE ORDERS.ORDER_UID = #{orderId}
    AND ADDRESSES.ADDRESS_UID = ORDERS.ADDRESS_UID;
</update>

<!-- 배송장소 출력 -->
<select id="selectDeliveryLocations" parameterType="Map" resultType="Map">
SELECT * FROM DELIVERY_LOCATIONS;
</select>

<!--[GYEONG]  user uid에 따른 교환, 반품, 취소 처리 가능한 목록 구현-->
<select id="selectApplicationList" parameterType="Map" resultType="Map">
SELECT ORDERS.ORDER_DATE,
       ORDERS.ORDER_UID,
       CONCAT(
           (SELECT P.PRODUCT_NAME 
            FROM PRODUCTS P 
            WHERE P.PRODUCT_UID = OD.PRODUCT_UID
            ORDER BY OD.ORDER_DETAIL_UID LIMIT 1),
           IF(COUNT(*) > 1, CONCAT(' 외 ', COUNT(*)-1, '개'), '')
       ) AS PRODUCT_NAME,
       SUM(OD.PRICE * OD.QUANTITY) AS PAY_AMOUNT,
       OC.CONDITION_NAME
FROM ORDER_DETAILS OD
INNER JOIN ORDERS ON ORDERS.ORDER_UID = OD.ORDER_UID
INNER JOIN ORDER_CONDITIONS OC ON OC.ORDER_CONDITION_UID = OD.ORDER_CONDITION_UID
INNER JOIN USERS ON ORDERS.USER_UID = USERS.USER_UID
WHERE USERS.USER_UID=#{USER_UID}
GROUP BY ORDERS.ORDER_UID
</select>

<!-- 취소 신청을 하려는 목록 값 가져오기 -->

<select id="selectCancelOrder" parameterType="Map" resultType="Map">
SELECT 
  ORDERS.ORDER_UID, 
  (
    SELECT PRODUCTS.PRODUCT_NAME
    FROM ORDER_DETAILS
    INNER JOIN PRODUCTS ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
    WHERE ORDER_DETAILS.ORDER_UID = ORDERS.ORDER_UID
    ORDER BY ORDER_DETAILS.ORDER_DETAIL_UID ASC
    LIMIT 1
  ) AS FIRST_PRODUCT_NAME,
  COUNT(*)-1 AS OTHER_PRODUCTS_COUNT,
  USERS.EMAIL,
  USERS.TEL 
FROM ORDERS
INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
INNER JOIN PRODUCTS ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
INNER JOIN USERS ON ORDERS.USER_UID = USERS.USER_UID
WHERE ORDERS.ORDER_UID = #{orderId}
GROUP BY ORDERS.ORDER_UID, USERS.EMAIL, USERS.TEL
</select>

<select id="selectCancelReason" parameterType="Map" resultType="Map">
SELECT *
FROM CANCELLED_REASONS
</select>

<!-- 취소신청 -->
<insert id="insertCancelOrder" parameterType="Map">
INSERT INTO CANCELLED_ORDERS (CANCELLED_ORDER_UID,REASON_UID,ORDER_UID,DATE)
VALUES ( #{CANCELLED_ORDER_UID},
        #{REASON_UID},
        #{orderId},
        sysdate())
</insert>

<update id="updateCancelCondition" parameterType="Map">
UPDATE ORDER_DETAILS
SET ORDER_CONDITION_UID='OC4'
WHERE ORDER_UID = #{orderId}
</update>

<!-- 취소신청 중복 방지 숫자 세기-->

<select id="checkCntCancel" parameterType="Map" resultType="Integer">
SELECT COUNT(*) 
FROM CANCELLED_ORDERS CO
INNER JOIN ORDERS O
ON CO.ORDERS_UID = O.ORDERS_UID
WHERE O.ORDER_UID = #{orderId}
</select>
<!-- 반품 / 교환 신청 하려는 Uid, productName List 가져오기 -->
<select id="selectRefundExchangeUidProductNameList" parameterType="Map" resultType="Map">
SELECT OD.ORDER_DETAIL_UID, P.PRODUCT_NAME
FROM ORDER_DETAILS OD
INNER JOIN PRODUCTS P ON OD.PRODUCT_UID = P.PRODUCT_UID
INNER JOIN ORDERS O ON O.ORDER_UID=OD.ORDER_UID
WHERE OD.ORDER_UID = #{orderId}
</select>
<!-- 반품 / 교환 신청 User 정보가져오기 -->
<select id="selectRefundExchangeUser" parameterType="Map" resultType="Map">
SELECT EMAIL, TEL
FROM USERS U
INNER JOIN ORDERS O
ON O.USER_UID = U.USER_UID
WHERE ORDER_UID = #{orderId}
</select>
<!-- 반품 / 교환사유 가져오기 -->
<select id="selectRefundExchangeReasons" parameterType="Map" resultType="Map">
SELECT *
FROM REFUND_EXCHANGE_REASONS
</select>

<!-- 반품 / 교환 신청 -->
<insert id="insertrefundExchangeOrder" parameterType="Map">
    INSERT INTO ${refundExchangeType}_ORDERS 
        (${refundExchangeType}_ORDER_UID, ORDER_DETAIL_UID, REASON_UID, REASON_DETAIL, DATE)
    VALUES 
        <if test="ORDER_DETAIL_UID instanceof java.util.Collection">
            <foreach collection="ORDER_DETAIL_UID" item="item" separator=",">
                (#{REFUND_ORDER_UID}, #{item}, #{REASON_UID}, #{REASON_DETAIL}, sysdate())
            </foreach>
        </if>
        <if test="ORDER_DETAIL_UID instanceof java.lang.String or ORDER_DETAIL_UID instanceof java.lang.Integer">
            (#{REFUND_ORDER_UID}, #{ORDER_DETAIL_UID}, #{REASON_UID}, #{REASON_DETAIL}, sysdate())
        </if>
    ON DUPLICATE KEY UPDATE REASON_UID = VALUES(REASON_UID), REASON_DETAIL = VALUES(REASON_DETAIL), DATE = VALUES(DATE)
</insert>
<!-- 반품/ 교환신청후 상태변경 -->
<update id="updateRefundExchangeCondition" parameterType="Map">
  UPDATE ORDER_DETAILS
  SET ORDER_CONDITION_UID = 
    CASE #{refundExchangeType}
      WHEN 'REFUND' THEN 'OC6'
      WHEN 'EXCHANGE' THEN 'OC5'
      ELSE 'OC4' 
    END
  WHERE ORDER_UID = #{ORDER_UID}
</update>

<!-- 취소/반품/교환 내역 출력 -->
<select id="selectCanRefExcList" parameterType="Map" resultType="Map">
SELECT 
  APPLICATION_DATE, 
  PRODUCT_NAME,
  ORDER_CONDITION
FROM (
  SELECT 
    CANCELLED_ORDERS.DATE AS APPLICATION_DATE,
    PRODUCTS.PRODUCT_NAME AS PRODUCT_NAME,
    COALESCE(ORDER_CONDITIONS.CONDITION_NAME, '진행중') AS ORDER_CONDITION
  FROM CANCELLED_ORDERS
  INNER JOIN ORDERS ON CANCELLED_ORDERS.ORDER_UID = ORDERS.ORDER_UID
  INNER JOIN ORDER_DETAILS ON ORDERS.ORDER_UID = ORDER_DETAILS.ORDER_UID
  INNER JOIN PRODUCTS ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
  INNER JOIN ORDER_CONDITIONS ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
  WHERE ORDERS.USER_UID = #{USER_UID}
  
  UNION ALL
  
  SELECT 
    REFUND_ORDERS.DATE AS APPLICATION_DATE,
    PRODUCTS.PRODUCT_NAME AS PRODUCT_NAME,
    COALESCE(ORDER_CONDITIONS.CONDITION_NAME, '진행중') AS ORDER_CONDITION
  FROM REFUND_ORDERS
  INNER JOIN ORDER_DETAILS ON REFUND_ORDERS.ORDER_DETAIL_UID = ORDER_DETAILS.ORDER_DETAIL_UID
  INNER JOIN PRODUCTS ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
  LEFT JOIN ORDER_CONDITIONS ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
  WHERE ORDER_DETAILS.ORDER_UID IN (
    SELECT ORDER_UID FROM ORDERS WHERE USER_UID = #{USER_UID}
  ) AND ORDER_CONDITIONS.CONDITION_NAME NOT IN ('상품준비중', '배송준비중', '배송완료', '주문완료')
  
  UNION ALL
  
  SELECT 
    EXCHANGE_ORDERS.DATE AS APPLICATION_DATE,
    PRODUCTS.PRODUCT_NAME AS PRODUCT_NAME,
    COALESCE(ORDER_CONDITIONS.CONDITION_NAME, '진행중') AS ORDER_CONDITION
  FROM EXCHANGE_ORDERS
  INNER JOIN ORDER_DETAILS ON EXCHANGE_ORDERS.ORDER_DETAIL_UID = ORDER_DETAILS.ORDER_DETAIL_UID
  INNER JOIN PRODUCTS ON ORDER_DETAILS.PRODUCT_UID = PRODUCTS.PRODUCT_UID
  LEFT JOIN ORDER_CONDITIONS ON ORDER_DETAILS.ORDER_CONDITION_UID = ORDER_CONDITIONS.ORDER_CONDITION_UID
  WHERE ORDER_DETAILS.ORDER_UID IN (
    SELECT ORDER_UID FROM ORDERS WHERE USER_UID = #{USER_UID}
  ) AND ORDER_CONDITIONS.CONDITION_NAME NOT IN ('상품준비중', '배송준비중', '배송완료', '주문완료')
) AS APPLICATIONS
ORDER BY APPLICATION_DATE DESC
</select>

<!--[GYEONG] 리뷰 작성할수있는 내역 출력 -->
<select id="selectReviewWriteList" parameterType="Map" resultType="Map">
  SELECT OD.PRODUCT_UID, P.PRODUCT_NAME, O.ORDER_DATE, OD.ORDER_DETAIL_UID
  FROM ORDERS O
  JOIN ORDER_DETAILS OD ON O.ORDER_UID = OD.ORDER_UID
  JOIN PRODUCTS P ON OD.PRODUCT_UID = P.PRODUCT_UID
  LEFT OUTER JOIN REVIEWS R ON OD.ORDER_DETAIL_UID = R.ORDER_DETAIL_UID
	WHERE O.USER_UID = #{USER_UID}
  AND R.REVIEW_UID IS NULL
</select>
<!-- [GYEONG] 주문상세 아이디를 바탕으로 리뷰 작성할 것 가져오기 -->
<select id="selectReviewWriteInfo" parameterType="Map" resultType="Map">
SELECT PRODUCTS.PRODUCT_NAME, ORDER_DETAILS.ORDER_DETAIL_UID,PRODUCTS.PRODUCT_UID
FROM PRODUCTS
INNER JOIN ORDER_DETAILS ON PRODUCTS.PRODUCT_UID = ORDER_DETAILS.PRODUCT_UID
WHERE ORDER_DETAILS.ORDER_DETAIL_UID = #{orderDetailUid}
 </select>

<!-- [GYEONG]리뷰등록하기  -->
<insert id="insertReview" parameterType="Map">
 INSERT INTO REVIEWS (REVIEW_UID, PRODUCT_UID, RATING, CONTENT, CREATE_DATE, ORDER_DETAIL_UID)
VALUES (#{REVIEW_UID}, #{PRODUCT_UID}, #{RATING}, #{CONTENT}, sysdate(), #{ORDER_DETAIL_UID})
</insert>
<!-- [GYEONG] 작성한 리뷰 목록 가져오기 -->
<select id="selectMyReviewList" parameterType="Map" resultType="Map">
SELECT R.REVIEW_UID, R.PRODUCT_UID, R.RATING, R.CONTENT, R.CREATE_DATE, P.PRODUCT_NAME
FROM REVIEWS R
INNER JOIN ORDER_DETAILS OD ON R.ORDER_DETAIL_UID = OD.ORDER_DETAIL_UID
INNER JOIN ORDERS O ON OD.ORDER_UID = O.ORDER_UID
INNER JOIN PRODUCTS P ON R.PRODUCT_UID = P.PRODUCT_UID
WHERE O.USER_UID = #{USER_UID}
 </select>

<!-- 회원정보 수정할 정보 가져오기 -->
<select id="selectUserInfo" parameterType="Map" resultType="Map">
SELECT USERS.EMAIL, USERS.USER_NAME, USERS.TEL, ADDRESSES.ZIP_CODE, ADDRESSES.ADDRESS, ADDRESSES.DETAIL
FROM USERS
INNER JOIN ADDRESSES
ON USERS.USER_UID = ADDRESSES.USER_UID
WHERE USERS.USER_UID = #{USER_UID}
AND ADDRESSES.ADDRESS_NAME = '기본'
</select >
<update id="updateUserInfo" parameterType="Map">
  UPDATE ADDRESSES, USERS
  SET USERS.TEL= #{TEL},
      ADDRESSES.ZIP_CODE = #{ZIP_CODE},
      ADDRESSES.ADDRESS = #{ADDRESS},
      ADDRESSES.DETAIL = #{DETAIL},
      ADDRESSES.EXPOSURE = 'YES'
  WHERE USERS.USER_UID = #{USER_UID}
    AND ADDRESSES.ADDRESS_NAME = "기본"
</update>

<update id="updatePassword" parameterType="Map">
  UPDATE USERS
  SET PASSWORD= #{PASSWORD}
  WHERE USER_UID = #{USER_UID}
</update>

</mapper>